{"version":3,"sources":["component/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["MainPage","props","state","dataKaryawan","inputNama","inputJabatan","inputJk","inputTtl","idInput","panggilSemua","bind","simpanData","handleInput","clearInput","fetch","then","response","json","hasil","setState","this","id","method","alert","inputJK","body","JSON","stringify","nama_karyawan","jabatan","jenis_kelamin","tanggal_lahir","headers","result","value","e","target","Container","Row","dataState","Col","Form","Control","type","onChange","placeholder","Button","onClick","variant","reverse","map","index","Card","style","width","marginTop","marginLeft","key","Body","Title","Text","Footer","hapusData","marginRight","panggilById","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78aafa97.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Col, Container, Form, Row, Card} from 'react-bootstrap';\n\nclass MainPage extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            dataKaryawan:[],\n            inputNama:'',\n            inputJabatan: '',\n            inputJk: '',\n            inputTtl: '',\n            idInput: ''\n        }\n        this.panggilSemua = this.panggilSemua.bind(this)\n        this.simpanData = this.simpanData.bind(this)\n        this.handleInput = this.handleInput.bind(this)\n        this.clearInput = this.clearInput.bind(this)\n\n    }\n\n    panggilSemua(){\n        fetch('http://localhost:3000/data-karyawan')\n        .then((response)=> response.json())\n        .then((hasil)=> this.setState({dataKaryawan: hasil}))\n    }       \n\n    componentDidMount(){\n        this.panggilSemua()\n    }\n\n    hapusData(id){\n        fetch(`http://localhost:3000/data-karyawan/${id}`, {\n            method: 'DELETE',\n        }).then((response =>{alert('data sudah kehapus')\n        this.panggilSemua()\n    }))\n    }\n\n    simpanData(){\n        if(this.state.inputNama === \"\" || this.state.inputJabatan === \"\" || this.state.inputJK === \"\" || this.state.inputTtl === \"\"){\n            alert(\"silahkan isi data\")\n        }else if(this.state.idInput === ''){\n            fetch('http://localhost:3000/data-karyawan',{\n                method: 'POST',\n                body: JSON.stringify({\n                    nama_karyawan: this.state.inputNama, \n                    jabatan: this.state.inputJabatan,\n                    jenis_kelamin: this.state.inputJk,\n                    tanggal_lahir: this.state.inputTtl,\n                }),\n                headers:{\n                    'Content-type': 'application/json; charshet=UTF-8',\n                },\n            }).then((response)=>response.json())\n            .then((result =>{\n                alert(\"berhasil tambah data\");\n                this.clearInput();\n                this.panggilSemua();\n            }))\n        }else{\n            fetch(`http://localhost:3000/data-karyawan/${this.state.idInput}`,{\n                method: 'PUT',\n                body: JSON.stringify({\n                    nama_karyawan: this.state.inputNama, \n                    jabatan: this.state.inputJabatan,\n                    jenis_kelamin: this.state.inputJk,\n                    tanggal_lahir: this.state.inputTtl,\n                }),\n                headers:{\n                    'Content-type': 'application/json; charshet=UTF-8',\n                },\n            }).then((response)=>response.json())\n            .then((result =>{\n                alert(\"berhasil simpan data\");\n                this.clearInput();\n                this.panggilSemua();\n            }))\n        }\n    }\n\n    handleInput(value, e){\n        this.setState({[value]: e.target.value})\n               \n    }\n\n    clearInput(){\n        this.setState(\n            {\n                inputNama:'',\n                inputJabatan: '',\n                inputJk: '',\n                inputTtl: '',\n                idInput:''\n            }\n        )\n    }\n\n    panggilById(id){\n        fetch(`http://localhost:3000/data-karyawan/${id}`)\n        .then((response)=>response.json())\n        .then((hasil=>{\n            // this.props.setModalShow(true)\n            this.setState(\n                {\n                    inputNama: hasil.nama_karyawan,\n                    inputJabatan: hasil.jabatan,\n                    inputJk: hasil.jenis_kelamin,\n                    inputTtl: hasil.tanggal_lahir,\n                    idInput: hasil.id\n                }\n            )\n                       \n        }))\n        \n    }\n\n    render(){\n        \n        return(\n            <Container>\n                <Row \n                dataState={this.state}\n                handleInput={this.handleInput}\n                >\n                    <Col>\n                        <Form.Control type=\"text\" value={this.state.inputNama} onChange={(e)=>this.handleInput('inputNama', e)} placeholder=\"Masukan Nama\"/>\n                    </Col>\n                    <Col>\n                        <Form.Control type=\"text\" value={this.state.inputJabatan} onChange={(e)=>this.handleInput('inputJabatan', e)} placeholder=\"Masukan Jabatan\"/>\n                    </Col>\n                    <Col>\n                        <Form.Control type=\"text\" value={this.state.inputJk} onChange={(e)=>this.handleInput('inputJk', e)} placeholder=\"Masukan Jenis Kelamin\"/>\n                    </Col>\n                    <Col>\n                        <Form.Control type=\"date\" value={this.state.inputTtl} onChange={(e)=>this.handleInput('inputTtl', e)} placeholder=\"Masukan TTL\"/>\n                    </Col>\n                    <Col>\n                        <Button onClick={()=>this.simpanData()} variant=\"primary\">Simpan Data</Button>\n                    </Col>\n                </Row>\n                \n                    {\n                        this.state.dataKaryawan.reverse().map((value, index)=>{\n                            return(\n                                <Card style={{ width:'300px', marginTop:'30px', marginLeft:'30px'}} key={index}>\n                                    <Card.Body>\n                                        <Card.Title>Nama : {value.nama_karyawan}</Card.Title>\n                                        <Card.Text>Jabatan : {value.jabatan}</Card.Text>\n                                        <Card.Text>Jenis Kelamin : {value.jenis_kelamin}</Card.Text>\n                                        <Card.Text>Tanggal Lahir : {value.tanggal_lahir}</Card.Text>\n                                    </Card.Body>\n                                    <Card.Footer>\n                                        <Button onClick={()=>this.hapusData(value.id)} variant=\"outline-danger\" style={{marginRight:'5%', marginLeft:'20%'}}>Hapus</Button>\n                                        <Button onClick={()=>this.panggilById(value.id)} variant=\"success\">Edit</Button>\n                                    </Card.Footer>\n                                </Card>\n                        )\n                    })    \n                }\n                \n            </Container>\n        )\n    }\n}\nexport default MainPage;","import React from 'react';\nimport './App.css';\nimport MainPage from './component/MainPage';\nimport './css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div>\n      <center><h1>DATA KARYAWAN</h1></center><br/><br/>\n      <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}